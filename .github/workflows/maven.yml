# name: Java CI with Maven

# on:
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#     - uses: actions/checkout@v4

#     - name: Set up JDK 21
#       uses: actions/setup-java@v4
#       with:
#         java-version: '21'
#         distribution: 'temurin'
#         cache: maven

#     - name: Build with Maven
#       run: mvn clean package --file pom.xml

#     - name: Deploy JAR to server
#       run: scp -i ${{ secrets.TESTTT }} target/*.jar ubuntu@13.127.122.172:/home/ubuntu

#     # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts
#     - name: Update dependency graph
#       uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6






# name: Java CI with Maven

# on:
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Set up JDK 21
#       uses: actions/setup-java@v4
#       with:
#         java-version: '21'
#         distribution: 'temurin'
#         cache: maven

#     - name: Build with Maven
#       run: mvn clean package --file pom.xml

#     - name: Create artifacts directory if not exists
#       run: echo {{test.mykey}}

#     - name: Move artifacts to the artifacts directory
#       run: |
#         if [ -f target/*.jar ]; then
#           mv target/*.jar artifacts/
#         else
#           echo "No JAR files found"
#         fi

#     - name: Upload artifacts to GitHub
#       uses: actions/upload-artifact@v3
#       with:
#         name: Build
#         path: artifacts/

#   release:
#     runs-on: ubuntu-latest
#     needs: build
#     permissions:
#       contents: write

#     steps:
#     - name: Download artifacts
#       uses: actions/download-artifact@v3
#       with:
#         name: Build
#         path: build

#     - name: Zip artifacts
#       run: zip -r build.zip build/

#     - name: Create Release
#       uses: ncipollo/release-action@v1
#       with:
#         artifacts: "build.zip"
#         tag: "v1.0.0"  # Adjust the version as needed
#         name: "Release v1.0.0"  # Adjust the release name as needed
#         body: "Release notes for v1.0.0"  # Optional release notes




name: Build and Push to Docker Hub

on:
  push:
    branches:
      - main  # Change this to the branch you want to trigger the action

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Java (for building the Spring app)
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'  # Change this to the version your Spring app needs

      # Step 3: Build the Spring application
      - name: Build with Maven
        run: mvn clean install  # If using Gradle, change to `./gradlew build`

      # Step 4: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # Step 5: Build the Docker image
      - name: Build Docker image
        run: |
          IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/my-spring-app:latest
          docker build -t $IMAGE_NAME .

      # Step 6: Push the Docker image to Docker Hub
      - name: Push Docker image to Docker Hub
        run: |
          IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/my-spring-app:latest
          docker push $IMAGE_NAME

















